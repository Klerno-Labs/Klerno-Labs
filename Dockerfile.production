# Klerno Labs - Production Docker Configuration
# Multi-stage build for optimized production deployment

# Base Python image with security updates
FROM python:3.11-slim-bullseye as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    git \
    openssl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r klerno && useradd -r -g klerno klerno

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-cov \
    pytest-asyncio \
    black \
    flake8 \
    mypy \
    pre-commit

# Copy application code
COPY . .

# Change ownership to non-root user
RUN chown -R klerno:klerno /app

# Switch to non-root user
USER klerno

# Expose development port
EXPOSE 8000

# Development command
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data /app/backups /app/logs

# Change ownership to non-root user
RUN chown -R klerno:klerno /app

# Switch to non-root user
USER klerno

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose production port
EXPOSE 8000

# Production command
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# Monitoring stage (for monitoring dashboard)
FROM base as monitoring

# Install additional monitoring dependencies
RUN pip install --no-cache-dir \
    prometheus-client \
    grafana-api \
    psutil

# Copy monitoring specific files
COPY production_monitoring_dashboard.py .
COPY backup_disaster_recovery.py .

# Change ownership
RUN chown -R klerno:klerno /app

# Switch to non-root user
USER klerno

# Expose monitoring port
EXPOSE 8080

# Monitoring command
CMD ["python", "production_monitoring_dashboard.py"]

# Backup stage (for backup operations)
FROM base as backup

# Install backup dependencies
RUN pip install --no-cache-dir \
    schedule \
    boto3 \
    cryptography \
    paramiko

# Copy backup specific files
COPY backup_disaster_recovery.py .
COPY data/ ./data/

# Create backup directories
RUN mkdir -p /app/backups

# Change ownership
RUN chown -R klerno:klerno /app

# Switch to non-root user
USER klerno

# Backup command
CMD ["python", "backup_disaster_recovery.py"]