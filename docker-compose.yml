# ==============================================================================
# Klerno Labs - Horizontal Scaling Docker Compose Configuration
# ==============================================================================
# Multi-service architecture for development and testing
# Supports load balancing, caching, and database scaling

services:
  # ==============================================================================
  # Load Balancer / Reverse Proxy
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: klerno-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - app1
      - app2
    networks:
      - klerno-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # Application Instances (Horizontal Scaling)
  # ==============================================================================
  app1:
    build:
      context: .
      target: production
      args:
        BUILD_DATE: "${BUILD_DATE:-2025-01-27T00:00:00Z}"
        VCS_REF: "${VCS_REF:-dev}"
        VERSION: "${VERSION:-dev}"
    container_name: klerno-app1
    environment:
      - APP_ENV=production
      - PORT=8000
      - WORKERS=2
      - DATABASE_URL=postgresql://klerno:klerno_password@postgres:5432/klerno_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-32-characters-long}
      - API_KEY=${API_KEY:-dev-api-key}
      - RISK_THRESHOLD=${RISK_THRESHOLD:-0.75}
      - XRPL_RPC_URL=${XRPL_RPC_URL:-wss://xrplcluster.com/}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - INSTANCE_ID=app1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klerno-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  app2:
    build:
      context: .
      target: production
      args:
        BUILD_DATE: "${BUILD_DATE:-2025-01-27T00:00:00Z}"
        VCS_REF: "${VCS_REF:-dev}"
        VERSION: "${VERSION:-dev}"
    container_name: klerno-app2
    environment:
      - APP_ENV=production
      - PORT=8000
      - WORKERS=2
      - DATABASE_URL=postgresql://klerno:klerno_password@postgres:5432/klerno_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-32-characters-long}
      - API_KEY=${API_KEY:-dev-api-key}
      - RISK_THRESHOLD=${RISK_THRESHOLD:-0.75}
      - XRPL_RPC_URL=${XRPL_RPC_URL:-wss://xrplcluster.com/}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - INSTANCE_ID=app2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klerno-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==============================================================================
  # Database - PostgreSQL with High Availability
  # ==============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: klerno-postgres
    environment:
      POSTGRES_DB: klerno_db
      POSTGRES_USER: klerno
      POSTGRES_PASSWORD: klerno_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - klerno-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U klerno -d klerno_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000

  # Optional: Read Replica for Analytics
  postgres-replica:
    image: postgres:15-alpine
    container_name: klerno-postgres-replica
    environment:
      POSTGRES_DB: klerno_db
      POSTGRES_USER: klerno
      POSTGRES_PASSWORD: klerno_password
      PGUSER: klerno
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres
    networks:
      - klerno-network
    restart: unless-stopped
    profiles:
      - replica
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U klerno -d klerno_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==============================================================================
  # Caching Layer - Redis
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: klerno-redis
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - klerno-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # ==============================================================================
  # Monitoring and Observability
  # ==============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: klerno-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - klerno-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: klerno-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - klerno-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ==============================================================================
  # Background Task Queue
  # ==============================================================================
  celery-worker:
    build:
      context: .
      target: production
    container_name: klerno-celery-worker
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://klerno:klerno_password@postgres:5432/klerno_db
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-32-characters-long}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klerno-network
    restart: unless-stopped
    profiles:
      - worker
    command: celery -A app.tasks worker --loglevel=info --concurrency=4

  celery-beat:
    build:
      context: .
      target: production
    container_name: klerno-celery-beat
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://klerno:klerno_password@postgres:5432/klerno_db
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-32-characters-long}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - klerno-network
    restart: unless-stopped
    profiles:
      - worker
    command: celery -A app.tasks beat --loglevel=info

# ==============================================================================
# Networks
# ==============================================================================
networks:
  klerno-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local