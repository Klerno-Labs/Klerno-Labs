name: Build and Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.12"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety
    
    - name: Run pip-audit security scan
      run: |
        pip-audit --desc --output=pip-audit-report.json --format=json
      continue-on-error: true
    
    - name: Run safety security scan  
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          pip-audit-report.json
          safety-report.json
    
    - name: Check for high/critical vulnerabilities
      run: |
        python -c "
        import json
        import sys
        
        try:
            with open('pip-audit-report.json', 'r') as f:
                audit_data = json.load(f)
            
            # Check for high/critical issues in pip-audit
            high_critical = [v for v in audit_data.get('vulnerabilities', []) 
                           if v.get('severity', '').lower() in ['high', 'critical']]
            
            if high_critical:
                print(f'CRITICAL: Found {len(high_critical)} high/critical vulnerabilities')
                for vuln in high_critical:
                    print(f'- {vuln.get(\"id\", \"unknown\")}: {vuln.get(\"description\", \"\")}')
                sys.exit(1)
            else:
                print('✓ No high/critical vulnerabilities found in pip-audit')
                
        except FileNotFoundError:
            print('No pip-audit report found')
        except Exception as e:
            print(f'Error checking pip-audit results: {e}')
        "

  build-test:
    runs-on: ubuntu-latest
    name: Build and Package Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Test requirements installation
      run: |
        pip install -r requirements.txt
        echo "✓ All requirements installed successfully"
    
    - name: Test application import
      run: |
        python -c "
        import sys
        try:
            from app.main import app
            print('✓ Application imports successfully')
        except ImportError as e:
            print(f'✗ Application import failed: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'✗ Application error: {e}')
            sys.exit(1)
        "
    
    - name: Test FastAPI app creation
      run: |
        python -c "
        from app.main import app
        from fastapi import FastAPI
        
        assert isinstance(app, FastAPI), 'app is not a FastAPI instance'
        assert hasattr(app, 'routes'), 'app does not have routes'
        print(f'✓ FastAPI app created with {len(app.routes)} routes')
        "
    
    - name: Validate static assets exist
      run: |
        # Check that static files are present
        test -f app/static/css/bootstrap.min.css || echo "Missing: bootstrap.min.css"
        test -f app/static/css/app.css || echo "Missing: app.css"
        test -f app/static/js/bootstrap.bundle.min.js || echo "Missing: bootstrap.bundle.min.js"
        test -f app/static/klerno-wordmark.png || echo "Missing: klerno-wordmark.png"
        
        echo "✓ Static assets validation completed"
    
    - name: Test template rendering
      run: |
        python -c "
        from fastapi.testclient import TestClient
        from app.main import app
        
        client = TestClient(app)
        
        # Test that templates can be rendered without errors
        try:
            response = client.get('/login-ui')
            print(f'Login page: {response.status_code}')
        except Exception as e:
            print(f'Login page error: {e}')
        
        try:
            response = client.get('/signup-ui') 
            print(f'Signup page: {response.status_code}')
        except Exception as e:
            print(f'Signup page error: {e}')
        
        print('✓ Template rendering tests completed')
        "

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      run: |
        if [ -f Dockerfile ]; then
          echo "Testing Docker build..."
          docker build --no-cache -t klerno-labs:test .
          echo "✓ Docker build successful"
          
          # Test that the container can start
          docker run --rm -d --name klerno-test -p 8000:8000 klerno-labs:test &
          sleep 10
          
          # Test basic connectivity
          if curl -f http://localhost:8000/health; then
            echo "✓ Docker container health check passed"
          else
            echo "✗ Docker container health check failed"
          fi
          
          docker stop klerno-test || true
        else
          echo "No Dockerfile found, skipping Docker build test"
        fi

  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: high
        deny-licenses: GPL-2.0, GPL-3.0