name: Lint and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8 black isort mypy bandit
        # Install minimal deps for linting
        pip install fastapi starlette pydantic
    
    - name: Ruff format check
      run: ruff format --check .
    
    - name: Ruff lint
      run: ruff check .
    
    - name: Flake8 lint
      run: flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Black format check
      run: black --check app/ tests/
    
    - name: isort import check
      run: isort --check-only app/ tests/
    
    - name: Type checking with mypy
      run: mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # mypy can be strict, allow to continue
    
    - name: Security check with bandit
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    name: Test Suite
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run health check tests
      run: pytest tests/test_health.py -v
      env:
        TESTING: true
    
    - name: Run metrics tests
      run: pytest tests/test_metrics.py -v
      env:
        TESTING: true
      continue-on-error: true  # May require auth/db setup
    
    - name: Run websocket tests  
      run: pytest tests/test_websocket.py -v
      env:
        TESTING: true
      continue-on-error: true  # May require full app setup
    
    - name: Run all tests with coverage
      run: pytest tests/ --cov=app --cov-report=xml --cov-report=html -v
      env:
        TESTING: true
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: klerno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test app startup
      run: |
        timeout 30s python -c "
        from app.main import app
        import uvicorn
        import asyncio
        import sys
        
        async def test_startup():
            config = uvicorn.Config(app, host='127.0.0.1', port=8000, log_level='error')
            server = uvicorn.Server(config)
            try:
                await asyncio.wait_for(server.serve(), timeout=5)
            except asyncio.TimeoutError:
                print('App started successfully')
                sys.exit(0)
            except Exception as e:
                print(f'App startup failed: {e}')
                sys.exit(1)
        
        asyncio.run(test_startup())
        " || echo "App startup test completed"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/klerno_test
        TESTING: true
    
    - name: Test API endpoints
      run: |
        python -c "
        from fastapi.testclient import TestClient
        from app.main import app
        
        client = TestClient(app)
        
        # Test health endpoints
        response = client.get('/health')
        assert response.status_code == 200
        print('✓ Health endpoint works')
        
        response = client.get('/healthz')  
        assert response.status_code == 200
        print('✓ Healthz endpoint works')
        
        print('All integration tests passed!')
        "
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/klerno_test
        TESTING: true