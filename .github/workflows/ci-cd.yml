# ==============================================================================
# Klerno Labs - Continuous Integration & Deployment Pipeline
# ==============================================================================
# Comprehensive CI/CD workflow for every commit and PR
# Ensures code quality, security, and automated testing

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  POETRY_VERSION: "1.8.0"

jobs:
  # ==============================================================================
  # Code Quality & Linting
  # ==============================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit

      - name: 🎨 Run code formatting checks
        run: |
          black --check --diff app/
          isort --check-only --diff app/

      - name: 🔍 Run linting
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --max-complexity=10 --max-line-length=100 --statistics

      - name: 🏷️ Run type checking
        run: |
          mypy app/ --ignore-missing-imports

      - name: 🔒 Run security checks
        run: |
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/ -ll

      - name: 📊 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ==============================================================================
  # Unit & Integration Tests
  # ==============================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: klerno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🏗️ Run sanity check
        run: python sanity_check.py

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/klerno_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  # ==============================================================================
  # Security Scanning
  # ==============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety

      - name: 🔍 Run dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: 📊 Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: safety-report.json

  # ==============================================================================
  # Build & Docker
  # ==============================================================================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: klerno-labs
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: 🧪 Test Docker image
        run: |
          docker run --rm klerno-labs:latest python sanity_check.py

  # ==============================================================================
  # Notifications
  # ==============================================================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, build, security]
    steps:
      - name: 📊 Report Status
        run: |
          echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY