name: Klerno Labs Enterprise Production

on:
  push:
    branches: [main]
  pull_request:
    # Allow PR validation from feature branches including ci/enterprise-run-migrations-pr25
    branches: [main, "**"]
  workflow_dispatch:

concurrency:
  group: klerno-enterprise-${{ github.ref }}
  cancel-in-progress: true

jobs:
  early-artifact:
    name: Early artifact (placeholder)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create placeholder alembic log
        run: |
          mkdir -p .run || true
          echo "CI placeholder alembic log - $(date)" > .run/alembic.log || true
      - name: Upload placeholder alembic log
        uses: actions/upload-artifact@v4
        with:
          name: alembic-logs
          path: .run/alembic.log
          if-no-files-found: warn
      - name: Create run marker
        run: |
          mkdir -p .run || true
          echo "run-marker: $GITHUB_SHA $GITHUB_RUN_ID" > .run/run-marker.txt || true
      - name: Upload run marker artifact
        uses: actions/upload-artifact@v4
        with:
          name: run-marker
          path: .run/run-marker.txt
          if-no-files-found: warn

  artifact-publisher:
    name: Artifact Publisher (dedicated)
    runs-on: ubuntu-latest
    needs: early-artifact
    steps:
      - uses: actions/checkout@v4
      - name: Create dedicated early marker
        run: |
          mkdir -p .run || true
          echo "early-marker: $GITHUB_SHA $GITHUB_RUN_ID $(date)" > .run/early-marker-${GITHUB_RUN_ID}.txt || true
      - name: Upload early marker
        uses: actions/upload-artifact@v4
        with:
          name: early-marker-${{ github.run_id }}
          path: .run/early-marker-${{ github.run_id }}.txt
          if-no-files-found: warn

  enterprise-validation:
    name: Enterprise Application Validation
    needs: [early-artifact, artifact-publisher]
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      APP_ENV: test
      PORT: 8002
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install runtime deps into the runner Python interpreter
          python -m pip install -r requirements.txt
          # Install test/dev deps if available, otherwise ensure pytest is installed
          if [ -f dev-requirements.txt ]; then
            python -m pip install -r dev-requirements.txt
          else
            python -m pip install pytest
          fi

      - name: Ensure alembic log file exists
        run: |
          mkdir -p .run || true
          echo "CI: alembic log placeholder" > .run/alembic.log || true

      - name: Run DB migrations
        run: |
          # Ensure database schema is created before running integration tests.
          # Install alembic and create the local data directory used by sqlite.
          python -m pip install --upgrade alembic
          mkdir -p ./data
          mkdir -p .run
          # If CI didn't set DATABASE_URL, fall back to a local sqlite file.
          if [ -z "$DATABASE_URL" ]; then
            export DATABASE_URL="sqlite:///./data/klerno.db"
          fi
          # Run alembic pointing explicitly at the repo alembic.ini so the
          # migrations use the correct configuration in CI. Capture verbose
          # output to .run/alembic.log for debugging on failure.
          echo "=== alembic current ===" > .run/alembic.log || true
          python -m alembic -c alembic.ini current >> .run/alembic.log 2>&1 || true
          echo "=== alembic upgrade head ===" >> .run/alembic.log || true
          # Try upgrade; if it fails, attempt a safe stamp+upgrade fallback
          set -o pipefail || true
          python -m alembic -c alembic.ini upgrade head >> .run/alembic.log 2>&1 || (
            echo "alembic upgrade failed; attempting stamp head and retry" >> .run/alembic.log 2>&1 || true
            python -m alembic -c alembic.ini stamp head >> .run/alembic.log 2>&1 || true
            python -m alembic -c alembic.ini upgrade head >> .run/alembic.log 2>&1 || true
          )
          set +o pipefail || true

      - name: Ensure fallback DB tables exist
        # Run the lightweight initializer immediately after migrations so
        # tests will see the legacy `txs` table even if alembic created
        # a differently named table or partially failed.
        run: |
          python -m pip install --upgrade pip sqlalchemy
          python scripts/init_db_if_needed.py || true

      - name: Run Enterprise Application Tests
        run: |
          # Capture verbose pytest output while preserving exit status
          set -o pipefail || true
          python -m pytest tests/ -vv -rA --tb=short | tee enterprise_pytest_output.txt
          status=${PIPESTATUS[0]}
          exit $status

      - name: Validate Enterprise Features
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from enterprise_config import get_config, get_enabled_features
              config = get_config()
              features = get_enabled_features()
              print(f'Enterprise features: {len(features)}')
              assert len(features) >= 6, 'Must have 6+ enterprise features'
              print('✅ Enterprise validation passed')
          except Exception as e:
              print(f'❌ Enterprise validation failed: {e}')
              sys.exit(1)
          "

      - name: Security Scan
        run: |
          pip install bandit safety
          bandit -r app/ -f json -o security-report.json || true
          safety check --json || true

      - name: Upload migration logs
        if: always()
        run: |
          echo '--- BEGIN .run/alembic.log ---' || true
          if [ -f .run/alembic.log ]; then
            cat .run/alembic.log || true
          else
            echo 'No alembic log file found' || true
          fi
          echo '--- END .run/alembic.log ---' || true

      - name: Upload migration logs (per-run)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alembic-logs-${{ github.run_id }}
          path: .run/alembic.log
          if-no-files-found: warn

      - name: Upload enterprise test output (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: enterprise-pytest-output-${{ github.run_id }}
          path: enterprise_pytest_output.txt
          if-no-files-found: warn

      - name: Show last 200 lines of enterprise pytest output (on failure)
        if: failure()
        run: |
          echo '--- TAIL enterprise_pytest_output.txt ---' || true
          if [ -f enterprise_pytest_output.txt ]; then
            tail -n 200 enterprise_pytest_output.txt || true
          else
            echo 'enterprise_pytest_output.txt not found' || true
          fi
          echo '--- END TAIL enterprise_pytest_output.txt ---' || true

      - name: "Fallback: initialize DB schema if alembic failed"
        if: always()
        run: |
          # Run our lightweight initializer to ensure required tables exist
          python -m pip install --upgrade pip
          python -m pip install sqlalchemy
          python scripts/init_db_if_needed.py || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: enterprise-validation
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t klerno-enterprise:latest .

      - name: Test Docker Container
        run: |
          docker run -d --name klerno-test -p 8002:8002 klerno-enterprise:latest
          sleep 10
          curl -f http://localhost:8002/health || exit 1
          docker stop klerno-test
