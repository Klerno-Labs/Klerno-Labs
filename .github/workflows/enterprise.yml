name: Klerno Labs Enterprise Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: klerno-enterprise-${{ github.ref }}
  cancel-in-progress: true

jobs:
  enterprise-validation:
    name: Enterprise Application Validation
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      APP_ENV: production
      PORT: 8002
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install runtime deps into the runner Python interpreter
          python -m pip install -r requirements.txt
          # Install test/dev deps if available, otherwise ensure pytest is installed
          if [ -f dev-requirements.txt ]; then
            python -m pip install -r dev-requirements.txt
          else
            python -m pip install pytest
          fi

      - name: Run DB migrations
        run: |
          # Ensure database schema is created before running integration tests.
          # alembic is part of runtime requirements; run upgrade against the
          # configured DATABASE_URL (alembic.ini defaults to sqlite://./data/klerno.db).
          python -m pip install --upgrade alembic
          alembic upgrade head

      - name: Run Enterprise Application Tests
        run: |
          python -m pytest tests/ -v --tb=short

      - name: Validate Enterprise Features
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from enterprise_config import get_config, get_enabled_features
              config = get_config()
              features = get_enabled_features()
              print(f'Enterprise features: {len(features)}')
              assert len(features) >= 6, 'Must have 6+ enterprise features'
              print('✅ Enterprise validation passed')
          except Exception as e:
              print(f'❌ Enterprise validation failed: {e}')
              sys.exit(1)
          "

      - name: Security Scan
        run: |
          pip install bandit safety
          bandit -r app/ -f json -o security-report.json || true
          safety check --json || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: enterprise-validation
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t klerno-enterprise:latest .

      - name: Test Docker Container
        run: |
          docker run -d --name klerno-test -p 8002:8002 klerno-enterprise:latest
          sleep 10
          curl -f http://localhost:8002/health || exit 1
          docker stop klerno-test
