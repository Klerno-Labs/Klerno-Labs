name: Core CI

on:
  push:
    branches: [ main, master, chore/dev-dx ]
  pull_request:
    branches: [ main, master, chore/dev-dx ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: [ '3.11' ]
    env:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      APP_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi
          python -m pip install ruff mypy flake8 pytest

      - name: Startup diagnostic (routes & logging)
        # Run early to fail fast on import-time errors like route registration
        # or logging misconfiguration which historically caused hidden test failures.
        # Capture stdout/stderr to a file so CI can upload it for triage.
        run: |
          mkdir -p .run || true
          python - <<'PY' > .run/diagnostic-startup.txt 2>&1
          import sys
          try:
              from tools import diagnose_logging_and_routes
          except Exception as e:
              print('Diagnostic import failed:', e)
              sys.exit(2)
          # Running the diagnostic script returns 0 on success; print output
          diagnose_logging_and_routes.main()
          PY

      - name: Upload startup diagnostic artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: startup-diagnostic
          path: .run/diagnostic-startup.txt
          if-no-files-found: warn

      - name: Run production readiness checks
        # Run the readiness script to validate prod configuration and import-time
        # behavior; capture output for triage. Write JSON to .run/readiness.json
        run: |
          mkdir -p .run || true
          python scripts/check_prod_readiness.py > .run/readiness.txt 2>&1 || true
          # Also emit JSON summary (script prints JSON to stdout when successful)
          python scripts/check_prod_readiness.py 2>> .run/readiness.txt | tee .run/readiness.json || true

      - name: Upload readiness artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: readiness
          path: |
            .run/readiness.txt
            .run/readiness.json
          if-no-files-found: warn

      - name: Enforce readiness gate on main/master
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo 'Enforcing readiness gate for production branches...'
          if [ ! -f .run/readiness.json ]; then
            echo '.run/readiness.json not found; failing.' && cat .run/readiness.txt || true
            exit 2
          fi
          ok=$(jq -r '.ok' .run/readiness.json || echo false)
          if [ "$ok" != "true" ]; then
            echo 'Readiness checks failed:'
            jq -r '.problems[]?' .run/readiness.json || true
            cat .run/readiness.txt || true
            exit 2
          fi
          echo 'Readiness gate passed.'

      - name: Scrub sensitive runtime files
        if: always()
        run: |
          # Remove any saved dev tokens to avoid leaking secrets in artifacts
          if [ -f .run/dev_tokens.json ]; then
            echo 'Removing .run/dev_tokens.json before uploading artifacts'
            shred -u .run/dev_tokens.json || rm -f .run/dev_tokens.json || true
          fi

      - name: Smoke tests (runtime)
        # Run a small in-process smoke test to validate core runtime endpoints
        # Capture output to a file for easier triage and upload as an artifact.
        run: |
          mkdir -p .run || true
          python -m pip install fastapi[all] httpx > .run/preview-smoke.txt 2>&1 || true
          python tools/preview_smoke_test.py >> .run/preview-smoke.txt 2>&1 || true

      - name: Upload smoke-test artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-smoke
          path: .run/preview-smoke.txt
          if-no-files-found: warn

      - name: Lint (ruff)
        run: ruff check .

      - name: Run pre-commit checks
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit run --all-files || true

      - name: Type check (mypy)
        run: mypy --ignore-missing-imports app tests

      - name: Style (flake8)
        run: flake8 --max-line-length=120

      - name: Unit tests
        run: |
          pip install coverage
          coverage run -m pytest -q
          coverage xml -o coverage.xml
          coverage report -m || true

      - name: Enforce minimal coverage threshold
        run: |
          pip install coverage
          coverage report -m > cov.txt || true
          pct=$(grep -E '^TOTAL' cov.txt | awk '{print $NF}' | sed 's/%//') || echo '0'
          echo "Reported coverage: $pct%"
          THRESH=25
          if [ "${pct%%.*}" -lt "$THRESH" ]; then
            echo "Coverage below threshold ($THRESH%). Failing." && exit 1
          fi
          echo "Coverage threshold satisfied ($THRESH%)."

      - name: Bandit security scan
        run: |
          pip install bandit
          bandit -q -r app || true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Security audit (pip-audit)
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt || true
          if [ -f dev-requirements.txt ]; then pip-audit -r dev-requirements.txt || true; fi

      - name: Generate SBOM (CycloneDX)
        run: |
          pip install cyclonedx-bom
          cyclonedx-py env -o sbom.json || cyclonedx-py requirements -r requirements.txt -o sbom.json || true

      - name: Upload SBOM artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.json
          if-no-files-found: warn

      - name: Summary
        if: always()
        run: |
          echo 'Core CI completed.'
          echo 'Coverage and security audit steps executed.'

      - name: Upload diagnostic bundle (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostic-bundle
          path: |
            .run/**
            logs/**
            *.log
            coverage.xml
            sbom.json
            pytest_output.txt
          if-no-files-found: warn
