name: Core CI

on:
  push:
    branches: [main, master, chore/dev-dx]
  pull_request:
    branches: [main, master, chore/dev-dx]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.11"]
    env:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      APP_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install test & dev deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt >/dev/null
          if [ -f dev-requirements.txt ]; then python -m pip install -r dev-requirements.txt >/dev/null || true; fi

      - name: Lint (ruff)
        run: npx ruff check . || python -m ruff check . || true

      - name: Run pre-commit checks
        run: |
          python -m pip install --upgrade pip
          python -m pip install pre-commit >/dev/null
          pre-commit run --all-files || true

      - name: Type check (mypy)
        run: python -m mypy --ignore-missing-imports app tests || true

      - name: Style (flake8)
        run: python -m flake8 --max-line-length=120 || true

      - name: Unit tests and coverage
        run: |
          python -m pip install coverage >/dev/null
          # Run tests with coverage and capture full output for diagnostics
          # Use pipefail so we can tee output and still propagate pytest's exit code
          set -o pipefail || true
          coverage run -m pytest -vv -rA | tee pytest_output.txt
          test_status=${PIPESTATUS[0]}
          coverage xml -o coverage.xml || true
          coverage report -m || true
          exit $test_status

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Upload diagnostic bundle (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostic-bundle
          path: |
            .run/**
            logs/**
            *.log
            coverage.xml
            pytest_output.txt
          if-no-files-found: warn
