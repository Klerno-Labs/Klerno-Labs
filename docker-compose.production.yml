version: '3.8'

# Klerno Labs - Production Docker Compose Configuration
# Complete enterprise deployment with all services

services:
  # Main Application Service
  klerno-app:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: klerno-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///data/klerno.db
      - JWT_SECRET=${JWT_SECRET:-supersecurekeythatislongerthan32charactersforjwtencryption12345}
      - SECRET_KEY=${SECRET_KEY:-anothersupersecretkeyforsessions12345678}
      - LOG_LEVEL=INFO
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    networks:
      - klerno-network
    depends_on:
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Production Monitoring Dashboard
  klerno-monitoring:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: monitoring
    container_name: klerno-monitoring
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - MONITORING_MODE=production
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - app_data:/app/data:ro
      - monitoring_data:/app/monitoring
    networks:
      - klerno-network
    depends_on:
      - klerno-app
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup and Disaster Recovery Service
  klerno-backup:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: backup
    container_name: klerno-backup
    restart: unless-stopped
    environment:
      - BACKUP_MODE=automated
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET:-klerno-backups}
      - BACKUP_SCHEDULE=daily
    volumes:
      - app_data:/app/data:ro
      - backup_data:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - klerno-network
    depends_on:
      - klerno-app

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: klerno-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - klerno-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: klerno-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_dashboard.json:/etc/grafana/provisioning/dashboards/klerno-dashboard.json:ro
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
    networks:
      - klerno-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: klerno-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-klerno123}
    volumes:
      - redis_data:/data
    networks:
      - klerno-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: klerno-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - klerno-network
    depends_on:
      - klerno-app
      - klerno-monitoring
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: klerno-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - fluentd_data:/var/log/fluentd
    networks:
      - klerno-network
    depends_on:
      - klerno-app

  # Elasticsearch for Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: klerno-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - klerno-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: klerno-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - klerno-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Network Configuration
networks:
  klerno-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  backup_data:
    driver: local
  monitoring_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_data:
    driver: local
  elasticsearch_data:
    driver: local

# Additional Production Configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Environment Variables Template
# Create a .env file with these variables:
# JWT_SECRET=your-super-secure-jwt-secret-key-here
# SECRET_KEY=your-super-secure-session-key-here
# GRAFANA_ADMIN_PASSWORD=your-grafana-password
# REDIS_PASSWORD=your-redis-password
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# S3_BACKUP_BUCKET=your-backup-bucket-name