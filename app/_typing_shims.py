from typing import Any, Protocol


class IRedisLike(Protocol):
    def ping(self, *args: Any, **kwargs: Any) -> Any: ...

    def get(self, *args: Any, **kwargs: Any) -> Any: ...

    def set(self, *args: Any, **kwargs: Any) -> Any: ...

    def setex(self, *args: Any, **kwargs: Any) -> Any: ...

    def keys(self, *args: Any, **kwargs: Any) -> Any: ...

    def delete(self, *args: Any, **kwargs: Any) -> Any: ...
    def script_load(self, *args: Any, **kwargs: Any) -> Any: ...

    def evalsha(self, *args: Any, **kwargs: Any) -> Any: ...

    def eval(self, *args: Any, **kwargs: Any) -> Any: ...

    def info(self, *args: Any, **kwargs: Any) -> Any: ...


class IMemcacheClient(Protocol):
    def get(self, *args: Any, **kwargs: Any) -> Any: ...

    def set(self, *args: Any, **kwargs: Any) -> Any: ...

    def delete(self, *args: Any, **kwargs: Any) -> Any: ...

    def flush_all(self, *args: Any, **kwargs: Any) -> Any: ...


# Enterprise component protocols (conservative shapes)
class IDatabaseManager(Protocol):
    def initialize(self, *args: Any, **kwargs: Any) -> Any: ...

    def get_stats(self, *args: Any, **kwargs: Any) -> Any: ...

    def execute_query(self, query: str, params: Any | None = None) -> Any: ...

    def get_performance_stats(self, *args: Any, **kwargs: Any) -> Any: ...

    def get_database_stats(self, *args: Any, **kwargs: Any) -> Any: ...

    def shutdown(self, *args: Any, **kwargs: Any) -> Any: ...

    def shutdown_async(self, *args: Any, **kwargs: Any) -> Any: ...


class IErrorHandler(Protocol):
    def handle_error(
        self, exc: Any, context: str | None = None, *args: Any, **kwargs: Any
    ) -> Any: ...

    # Circuit breaker decorator or context manager factory
    def circuit_breaker(self, *args: Any, **kwargs: Any) -> Any: ...

    def get_error_statistics(self, *args: Any, **kwargs: Any) -> Any: ...

    def get_error_summary(self, *args: Any, **kwargs: Any) -> Any: ...


class ICICDPipeline(Protocol):
    def run(self, *args: Any, **kwargs: Any) -> Any: ...

    def run_pipeline(
        self, project_path: str, target_env: str = "development"
    ) -> Any: ...


class IHealthMonitor(Protocol):
    def register_check(self, name: str, fn: Any) -> Any: ...

    def get_dashboard_data(self) -> dict[str, Any]: ...

    def create_alert_rule(
        self,
        rule_id: str,
        condition: str,
        threshold: float,
        severity: str | None = None,
        actions: list[str] | None = None,
    ) -> Any: ...

    def shutdown(self, *args: Any, **kwargs: Any) -> Any: ...


class IAnalytics(Protocol):
    def track_event(
        self,
        name: str,
        properties: dict[str, Any] | None = None,
        *args: Any,
        **kwargs: Any,
    ) -> Any: ...

    def get_analytics_dashboard(self) -> dict[str, Any]: ...

    def generate_report(
        self, report_id: str, parameters: dict[str, Any] | None = None
    ) -> Any: ...

    def shutdown(self, *args: Any, **kwargs: Any) -> Any: ...


# Lightweight store/admin/auth module protocols used by enterprise_main_v2
class IStore(Protocol):
    def init_db(self) -> Any: ...

    def list_all(self, *args: Any, **kwargs: Any) -> Any: ...

    def _conn(self) -> Any: ...

    def create_user(self, *args: Any, **kwargs: Any) -> Any: ...

    def users_count(self) -> int: ...

    def get_user_by_id(self, user_id: Any) -> Any: ...

    def set_role(self, *args: Any, **kwargs: Any) -> Any: ...

    def set_subscription_active(self, *args: Any, **kwargs: Any) -> Any: ...

    def save_tagged(self, *args: Any, **kwargs: Any) -> Any: ...


class IAdminModule(Protocol):
    router: Any


class IAuthModule(Protocol):
    # Most uses are route handlers or helper functions; keep permissive
    router: Any
    signup_api: Any
    login_api: Any


# Lightweight DB connection/cursor protocols for runtime psycopg2 connections
class IPostgresCursor(Protocol):
    def execute(self, query: str, params: Any | None = None) -> Any: ...

    def fetchone(self) -> Any: ...

    def fetchall(self) -> Any: ...

    def close(self) -> None: ...


class IPostgresConnection(Protocol):
    def cursor(self) -> IPostgresCursor: ...

    def close(self) -> None: ...


# Synchronous DB connection/cursor protocols (sqlite3/DB-API compatible)
class ISyncCursor(Protocol):
    # DB-API cursors typically have fetchall/close and a rowcount attribute
    def fetchall(self) -> list[Any]: ...
    def fetchone(self) -> Any: ...
    def close(self) -> None: ...
    def execute(self, query: str, params: Any | None = None) -> "ISyncCursor": ...
    def executemany(self, query: str, seq_of_params: Any) -> "ISyncCursor": ...
    def fetchmany(self, size: int | None = None) -> list[Any]: ...

    # Common attributes exposed on sqlite3 cursors
    lastrowid: int | None
    description: tuple[Any, ...] | None

    rowcount: int | None


class ISyncConnection(Protocol):
    row_factory: Any

    def cursor(self) -> ISyncCursor: ...

    # Accept DB-API style signatures; keep permissive to match sqlite3/other drivers
    def execute(self, *args: Any, **kwargs: Any) -> ISyncCursor: ...
    def executemany(self, query: str, seq_of_params: Any) -> ISyncCursor: ...

    def commit(self) -> None: ...

    def rollback(self) -> None: ...

    def close(self) -> None: ...


# Async DB connection/cursor protocols reused by connection pools (aiosqlite/async drivers)
class IAsyncCursor(Protocol):
    async def fetchall(self) -> list[Any]: ...
    async def close(self) -> None: ...


class IAsyncConnection(Protocol):
    row_factory: Any

    async def execute(self, query: str, *args) -> IAsyncCursor: ...

    async def commit(self) -> None: ...

    async def rollback(self) -> None: ...

    async def close(self) -> None: ...
