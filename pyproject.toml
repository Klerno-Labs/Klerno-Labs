# ==============================================================================
# Klerno Labs - Python Project Configuration
# ==============================================================================
# Modern Python packaging and tooling configuration
# Enforces best practices, code quality, and development standards

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "klerno-labs"
version = "1.0.0"
description = "Enterprise-grade SaaS platform for blockchain compliance and risk management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Klerno Labs", email = "dev@klerno.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dynamic = ["dependencies"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

# ==============================================================================
# Black - Code Formatting
# ==============================================================================
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# ==============================================================================
# isort - Import Sorting
# ==============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["app"]
skip_glob = ["**/migrations/*"]

# ==============================================================================
# MyPy - Static Type Checking
# ==============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "xrpl.*",
    "sendgrid.*",
    "openai.*",
    "celery.*",
    "redis.*",
    "prometheus_client.*",
    "structlog.*",
    "uvloop.*",
    "psycopg2.*",
    "passlib.*"
]
ignore_missing_imports = true

# ==============================================================================
# Pytest - Testing Configuration
# ==============================================================================
[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (database, external APIs)",
    "security: Security-focused tests",
    "performance: Performance and load tests",
    "slow: Slow running tests",
    "xrpl: XRPL blockchain integration tests",
    "auth: Authentication and authorization tests",
    "api: API endpoint tests",
    "compliance: Compliance and regulatory tests",
    "e2e: End-to-end tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:xrpl.*",
    "ignore::DeprecationWarning:openai.*",
    "ignore::DeprecationWarning:urllib3.*",
    "ignore::DeprecationWarning:passlib.*"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
minversion = "8.0"

# ==============================================================================
# Coverage - Test Coverage Configuration
# ==============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*"
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

# ==============================================================================
# Bandit - Security Linting
# ==============================================================================
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True warnings in appropriate contexts

# ==============================================================================
# Ruff - Fast Python Linter (Alternative to flake8)
# ==============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S104",  # hardcoded bind all interfaces
    "S108",  # temp file without random suffix
]

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = ["S101"]  # Allow assert in tests
"sanity_check.py" = ["S101"]  # Allow assert in sanity checks

[tool.ruff.lint.isort]
known-first-party = ["app"]