# ==============================================================================
# Klerno Labs - Black Configuration
# ==============================================================================
# World-class Python code formatting for enterprise SaaS applications

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
    | node_modules
    | venv
)/
'''

# Format strings
skip-string-normalization = false
skip-magic-trailing-comma = false

# Preview features
preview = true

# ==============================================================================
# isort Configuration - Import Sorting
# ==============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]
known_first_party = ["app"]
known_third_party = [
    "fastapi", "uvicorn", "starlette", "pydantic", "sqlalchemy", 
    "alembic", "pytest", "requests", "httpx", "pandas", "numpy",
    "openai", "xrpl", "redis", "celery", "jinja2"
]

# ==============================================================================
# mypy Configuration - Static Type Checking  
# ==============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "xrpl.*",
    "openai.*", 
    "celery.*",
    "redis.*",
    "pandas.*",
    "numpy.*",
    "pytest.*"
]
ignore_missing_imports = true

# ==============================================================================
# pytest Configuration
# ==============================================================================
[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml"
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (database, external APIs)",
    "security: Security-focused tests", 
    "performance: Performance and load tests",
    "slow: Slow running tests",
    "xrpl: XRPL blockchain integration tests",
    "auth: Authentication and authorization tests",
    "api: API endpoint tests",
    "compliance: Compliance and regulatory tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:xrpl.*",
    "ignore::DeprecationWarning:openai.*",
    "ignore::DeprecationWarning:urllib3.*"
]

# ==============================================================================
# Coverage Configuration
# ==============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*", 
    "*/__init__.py",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]